import os, certififrom pyrogram import Client, errorsimport telebotimport threadingfrom telebot import typesimport asynciofrom backend import appfrom db import databaseDB = database()App = app()os.environ['SSL_CERT_FILE'] = certifi.where() api_id = '20663523'api_hash = 'f75fe6157dd68bdf0df5198adbc590fd'TELEGRAM_TOKEN = "5792484639:AAG1UTQ4EqpmpnJBi9GGvJ-NxUtPBC3RcYw" bot = telebot.TeleBot(TELEGRAM_TOKEN, threaded=False, num_threads=55, skip_pending=True)# حدد هنا معرف المطور المسموح له باستخدام البوتALLOWED_USER_ID = 7031471363  # قم بتغيير هذا الرقم إلى معرفك الخاص@bot.message_handler(commands=['start'])def Admin(message):    if message.from_user.id != ALLOWED_USER_ID:        bot.send_message(message.chat.id, "عذرًا، هذا البوت مخصص للاستخدام من قبل المطور فقط.")        return    AddAccount = types.InlineKeyboardButton("اضافه حساب 🛎", callback_data="AddAccount")    Accounts = types.InlineKeyboardButton("اكواد حساباتك 🖲", callback_data="Accounts")    a1 = types.InlineKeyboardButton("نقل اعضاء 👤😇", callback_data="a1")    inline = types.InlineKeyboardMarkup(keyboard=[[a1], [AddAccount], [Accounts]])    bot.send_message(        message.chat.id,        """*مرحبا بك  👋اختار ما تريد من الازرار اسفل 🔥يمكنك نقل اعضاء لجروبك 🛎من اي جروب اخر عام ☄Creator : @ICTS_930 *""",        reply_markup=inline,        parse_mode="markdown"    )@bot.callback_query_handler(lambda call: True)def call(call):    if call.from_user.id != ALLOWED_USER_ID:        bot.send_message(call.message.chat.id, "عذرًا، هذا البوت مخصص للاستخدام من قبل المطور فقط.")        return    if call.data == "Accounts":        num = DB.accounts()        bot.edit_message_text(            chat_id=call.message.chat.id,            message_id=call.message.message_id,            text=f"حساباتك المسجلة بالكامل: {num}",            parse_mode="markdown"        )    if call.data == "AddAccount":        msg = bot.edit_message_text(            chat_id=call.message.chat.id,            message_id=call.message.message_id,            text="*قم بإرسال الرقم الذي تريد تسليمه مع رمز الدولة الآن*📞🎩",            parse_mode="markdown"        )        bot.register_next_step_handler(msg, AddAccount)    if call.data == "a1":        msg = bot.edit_message_text(            chat_id=call.message.chat.id,            message_id=call.message.message_id,            text="*قم بإرسال رابط الجروب المراد النقل منه *🖲",            parse_mode="markdown"        )        bot.register_next_step_handler(msg, statement)def statement(message):    Fromgrob = message.text    msg = bot.send_message(        chat_id=message.chat.id,        text="*قم بإرسال رابط الجروب المراد النقل له*🛎",        parse_mode="markdown"    )    bot.register_next_step_handler(msg, statement2, Fromgrob)def statement2(message, Fromgrob):    Ingrob = message.text    msg = bot.send_message(        chat_id=message.chat.id,        text="*انتظر قليلا ⏱*",        parse_mode="markdown"    )    T = threading.Thread(target=asyncio.run, args=(App.GETuser(Fromgrob, Ingrob),))    T.start()    T.join()    list = T.return_value    numUser = len(list)    bot.send_message(        message.chat.id,        f"""*تم حفظ جميع الأعضاء المتاحة بنجاح ✅**معلومات عملية النقل 🥸😇الأعضاء المتاحة: {numUser} عضو 😋النقل من: {Fromgrob} 🎒النقل إلى: {Ingrob} 🧳مدة الفحص: 1 ثانية ⏱انتظر حتى تتم العملية 🎩*""",        parse_mode="markdown"    )    T = threading.Thread(target=asyncio.run, args=(App.ADDuser(list, Ingrob, message.chat.id, bot),))    T.start()def AddAccount(message):    try:        if "+" in message.text:            bot.send_message(message.chat.id, "*انتظر جاري الفحص* ⏱", parse_mode="markdown")            _client = Client("::memory::", in_memory=True, api_id=api_id, api_hash=api_hash, lang_code="ar")            _client.connect()            SendCode = _client.send_code(message.text)            Mas = bot.send_message(message.chat.id, "*أدخل الرمز المرسل إليك 🔏*", parse_mode="markdown")            bot.register_next_step_handler(Mas, sigin_up, _client, message.text, SendCode.phone_code_hash, message.text)	        else:            bot.send_message(message.chat.id, "*يرجى التحقق من صحة الرقم المدخل.*", parse_mode="markdown")    except Exception as e:        bot.send_message(message.chat.id, "ERORR: " + str(e))def sigin_up(message, _client, phone, hash, name):    try:        bot.send_message(message.chat.id, "*انتظر قليلا ⏱*", parse_mode="markdown")        _client.sign_in(phone, hash, message.text)        bot.send_message(message.chat.id, "*تم تأكيد الحساب بنجاح ✅*", parse_mode="markdown")        ses = _client.export_session_string()        DB.AddAcount(ses, name, message.chat.id)    except errors.SessionPasswordNeeded:        Mas = bot.send_message(message.chat.id, "*أدخل كلمة المرور الخاصة بحسابك 🔐*", parse_mode="markdown")        bot.register_next_step_handler(Mas, AddPassword, _client, name)    except Exception as e:        bot.send_message(message.chat.id, f"ERORR: {str(e)}")def AddPassword(message, _client, name):    try:        _client.check_password(message.text)        ses = _client.export_session_string()        DB.AddAcount(ses, name, message.chat.id)        _client.stop()        bot.send_message(message.chat.id, "*تم تأكيد الحساب بنجاح ✅*", parse_mode="markdown")    except Exception as e:        bot.send_message(message.chat.id, f"ERORR: {str(e)}")        _client.stop()bot.infinity_polling(none_stop=True, timeout=15, long_polling_timeout=15)